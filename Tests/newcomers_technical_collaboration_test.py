import pytest
from bson import ObjectId

from centralities import eigenVectorCentralityForTechnicalCollab

kafka_new_comers = {ObjectId('58c8d8ae02ca40f8bfbaaa9a'): 0.08, ObjectId('5b0fc400065f3902058de36a'): 0.3, ObjectId('5b0fc415065f39020f8df6af'): 0.17, ObjectId('5b0fc406065f39020d8de729'): 0.25, ObjectId('5b0fc414065f3902058df55f'): 0.18, ObjectId('5b0fc400065f3902068de37d'): 0.3, ObjectId('5b0fc401065f3902118de438'): 0.23, ObjectId('5b0fc40f065f3902088def23'): 0.24, ObjectId('5b0fc417065f3902058df80e'): 0.09, ObjectId('5b0fc419065f3902048dfaad'): 0.18, ObjectId('5b0fc401065f3902088de3ab'): 0.28, ObjectId('5b0fc404065f3902108de658'): 0.16, ObjectId('5b0fc418065f3902118df6fe'): 0.24, ObjectId('58c8dda402ca40f8bfbae3f8'): 0.17, ObjectId('5b0fc40a065f3902028de8d7'): 0.24, ObjectId('5b0fc418065f3902108dfc07'): 0.11, ObjectId('5b0fc404065f39020a8de5a1'): 0.21, ObjectId('58c898f5c03bb43526bcc439'): 0.17, ObjectId('5b0fc415065f3902118df47a'): 0.06, ObjectId('5b0fc416065f3902068df71b'): 0.13, ObjectId('58bfcda102ca40f8bf147ecd'): 0.12, ObjectId('5b0fc418065f3902068df8a3'): 0.04, ObjectId('5b0fc419065f3902088dfbc1'): 0.13, ObjectId('5b0fc413065f39020b8df381'): 0.14, ObjectId('5b0fc418065f39020d8df862'): 0.12, ObjectId('5b0fc415065f3902118df449'): 0.05, ObjectId('5cb58b59721db525ea14edba'): 0.0, ObjectId('5b0fc419065f3902118df849'): 0.06, ObjectId('5b0fc418065f3902128df9d4'): 0.12, ObjectId('5b0fc419065f3902028dfa90'): 0.14, ObjectId('58bfcf4fe4f89451f55ce164'): 0.05, ObjectId('5b0fc418065f3902058df8e4'): 0.16, ObjectId('5bacb1db57674ee167d6cac8'): 0.05, ObjectId('5b0fc40f065f3902108defd5'): 0.13, ObjectId('5b0fc418065f39020d8df817'): 0.05, ObjectId('5b0fc415065f3902108df8d1'): 0.05, ObjectId('5b0fc418065f39020a8df66c'): 0.05, ObjectId('5b0fc417065f3902078df847'): 0.01, ObjectId('5b0fc419065f39020e8df895'): 0.03, ObjectId('5967576154062d3df8af2522'): 0.04, ObjectId('5b0fc400065f39020e8de369'): 0.03, ObjectId('59e49df4f2a4565fe9e2bd8e'): 0.04, ObjectId('5b0fc410065f3902098df105'): 0.09, ObjectId('5b0fc419065f3902078df9d3'): 0.05, ObjectId('5b0fc418065f3902028dfa01'): 0.03, ObjectId('5b0fc415065f3902118df512'): 0.04, ObjectId('5b0fc432065f3902058e1752'): 0.05, ObjectId('5b0fc419065f3902028dfa41'): 0.06, ObjectId('5b7ffea558a6d70324e2fd78'): 0.0, ObjectId('5b0fc428065f3902018e0fe4'): 0.02}

pig_new_comers = {ObjectId('5b47695a0f9db94b7526f041'): 0.58, ObjectId('5b2903d0a096a05e0dd24b7c'): 0.58, ObjectId('5b2903cfa096a05e07d24bc0'): 0.58}

@pytest.mark.parametrize("project_name, expected_output", [("kafka", kafka_new_comers), ("pig", pig_new_comers)])
def test_eigenVectorCentralityForTechnicalCollab(project_name, expected_output):
    assert expected_output == eigenVectorCentralityForTechnicalCollab(project_name)
